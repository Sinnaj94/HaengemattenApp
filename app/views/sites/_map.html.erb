<script type="text/javascript">
    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');
    var hammocks = [];
    var map;
    var vectorSource = new ol.source.Vector();
    var overlay = new ol.Overlay({
        element: container,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });

    /**
     * This is for the Map, a tile Layer is built
     **/
    var tileLayer = new ol.layer.Tile({
        source: new ol.source.OSM({
        }),
    });

    var vectorLayer = new ol.layer.Vector({
        source: vectorSource
    });

    // Defining the Marker Style...
    var iconStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            anchor: [0.5, 1],
            anchorXUnits: 'fraction',
            anchorYUnits: 'fraction',
            src: "<%= asset_path('hammock.png') %>"
        }))
    });

    // Update Map
    function updateMap(hammocks) {
        vectorSource.clear();
        vectorSource.addFeatures(hammocks);
    }

    // Request all hammocks from the Server via Ajax
    function requestHammocksFromServer(handler) {
        $.ajax({
            url: "sites.json",
        }).done(function(data) {
            hammocks = [];
			console.log(data);
            // Converting hamocks to a Feature Object
            data.forEach(value => {
                var position = value["position"];
                // Transform from lonlat to Openlayers
                var geometry = new ol.geom.Point([position["lon"], position["lat"]]);
                geometry.transform('EPSG:4326', 'EPSG:900913');
                value["geometry"] = geometry;
                var feature = new ol.Feature(value);
                feature.setStyle(iconStyle);
                hammocks.push(feature);
                updateMap(hammocks);
                updateSidebar(hammocks);
            });
            handler(hammocks);
        });
    }

    function mapUpdate() {
        queryUpdate();
    }

    /**
     *  Helpers for manipulating the DOM
     *
     * */
    // Empty slot, gives a new form
    function emptySlot(position) {
        var form = document.getElementById("new_site").outerHTML;
        return "<code>" + ol.coordinate.toStringHDMS(position) + "</code>" + "<p>Hier ist noch keine Hängematte abgespeichert worden!</p>" + form;
    }

    // Converts the point to html
    function featureToHTML(feature) {
        // console.log("feature", feature);
        var comment = "Kommentare";
        if(feature.get("review_count") === 1) {
            comment = "Kommentar";
        }
        var isMine = feature.get("belongs_to_user");
        var postfix = "";
        if(isMine) {
            postfix = "<a class='btn btn-primary btn-block hammock-btn' href='"+ feature.get("edit") +"'>Bearbeiten</a>" +
                "<a class='btn btn-danger btn-block' href='"+ feature.get("delete") +"'>Löschen</a>"

        }
        return "<h2>" + feature.get("name") + "</h2> " +
            "<div class='description'>" +
            feature.get("description") + "</div>" +
            "<div class='discoverer'>" + feature.get("user").first + " " + feature.get("user").last + "</div>" +
            "<a href='"+ feature.get('detail_page') +"' id='click_on_detail'>" +
            feature.get("review_count") + " " + comment +
            "</a>" + postfix + "<div id='popup-comments' class='ol-popup-comments'></div>";
    }



    // Request and handle Hammocks
    $(document).ready(function(){
	  geoFindMe();
		
    });


    /**
     * Search functions and for Live Search
     *
     * */
    $("#search-input").on("input load", function() {
        queryUpdate()
    });

    function queryUpdate() {
        doQuery();
    }

    /***
     * Do the Query and update all (sidebar & map)
     * **/
    function doQuery() {
        // 1: Query the map Position
        erg = mapQuery(hammocks);
        // 2. Do the Search Query
        erg = searchQuery(erg, $("#search-input").val());
        //
        updateMap(erg);
        updateSidebar(erg);
    }

    /**
     *  Filter for a String in Name or Description
     * */
    function searchQuery(dataset, query) {
        query = query.toLowerCase();
        result = dataset.filter(hammock => hammock.get("name").toLowerCase().includes(query) ||
            hammock.get("description").toLowerCase().includes(query));
        return result;
    }

    /**
     * Do the checkbox query
     * */
    function checkboxQuery(dataset) {

    }



    function mapQuery(dataset) {
        var result = dataset.filter(hammock =>
            {
                var box = map.getView().calculateExtent();
                var lonlat = ol.proj.transformExtent(box,'EPSG:3857','EPSG:4326');
                var lon = hammock.get("position")["lon"];
                var lat = hammock.get("position")["lat"];
                return lonlat[0] < lon && lon < lonlat[2] && lonlat[1] < lat && lat < lonlat[3];
            });
        return result;
    }

    /**
     * Sidebar
     * */
    function updateSidebar(values) {
        var search_results = $("#search-results");
        search_results.empty();
        values.forEach(value => {
			console.log(value);
            var object = $("<li class='search-entry'></li>");
            var header = $("<h2 class='hammock-header'></h2>");
            var content = $("<div class='description'></div>");
            var author = $("<span></span>");
            content.text(value.get("description"));
            header.text(value.get("name"));
            object.append(header);
			for (i = 0; i < value.get("meanrating"); i++) {
				var stars = $('<span class="glyphicon glyphicon-star text-warning"></span>');
				object.append(stars);
			}
            object.append(content);
            var button = $("<button class='btn btn-primary search-link hammock-btn' type='button'><i class='fa fa-arrow-right'></i></button>");
            button.click(function() {
                navigateTo(value.get("geometry"));
            });
            object.append(button);
            search_results.append(object);
        });
    }

    /**
     * Navigate to Marker in Map
     * */
    function navigateTo(point) {
        map.getView().animate({center: point.flatCoordinates, duration: 500, zoom: 14}, function () {
            var feature = map.forEachFeatureAtPixel(map.getPixelFromCoordinate(point.flatCoordinates), function (feature) {
                return feature;
            });
            if (feature) {
                coordinate = feature.get("geometry").flatCoordinates;
                $(container).addClass("marker");
                content.innerHTML = featureToHTML(feature);
                overlay.setPosition(coordinate);
            }
        });
    }
	
	function drawMap(coordArray) {
		console.log("Drawing map at " + coordArray);
			
		/**
		 * The actual Map
		 **/
		map = new ol.Map({
			layers: [
				tileLayer,
				vectorLayer,
			],
			//overlays: [overlay],
			target: 'map',
			view: new ol.View({
				center: ol.proj.fromLonLat(coordArray),
				minZoom: 2,
				zoom:12,
			})
		});
		
		map.on("moveend", function() {
			mapUpdate();
		});
		map.on("zoomend", function() {
			mapUpdate();
		});
		
		requestHammocksFromServer(updateMap);
		  // Trigger once to fill sidebar with values

		  // Registering Click Handler
		  map.on('singleclick', function(evt) {
			  var coordinate = evt.coordinate;
			  var feature = map.forEachFeatureAtPixel(evt.pixel,
				  function(feature) {
					  return feature;
				  });
			  if(feature) {
				  coordinate = feature.get("geometry").flatCoordinates;
				  $(container).addClass("marker");
				  content.innerHTML = featureToHTML(feature);
				  $("#click_on_detail").on("click", function(e) {
					  e.preventDefault();
					  $.ajax({
						  url:this.href,
						  method: "GET",

					  }).done(function(data) {
						  // TODO
						  var p = $("#popup-comments");
						  p.empty();
						  data["reviews"].forEach(item => {
							  var currentComment = $("<div class='ol-popup-comments-single'></div>");
							  var actualComment = $("<div class='ol-popup-comments-single-comment'></div>");
							  var stars = $("<div class='ol-popup-comments-single-stars'></div>");
							  for(var i = 0; i < 5; i++) {
								  if(i < item["rating"]) {
									  stars.append("<i class='fa fa-star fa-star-positive'>");
								  } else {
									  stars.append("<i class='fa fa-star fa-star-negative'>");
								  }
							  }
							  actualComment.text(item["comment"]);
							  currentComment.append(actualComment);
							  currentComment.append(stars);
							  p.append(currentComment);
						  });
					  });
				  });

			  } else {
				  $(container).removeClass("marker");
				  var lonLat = ol.proj.toLonLat(coordinate);
				  content.innerHTML = emptySlot(lonLat);
				  document.getElementById("site_longitude").value = lonLat[0];
				  document.getElementById("site_latitude").value = lonLat[1];
			  }
			  overlay.setPosition(coordinate);
			  $("#popup").hide();
			  $("#popup").fadeIn();
		  });

		  // Register Close Button for Notice
		  closer.onclick = function() {
			  overlay.setPosition(undefined);
			  closer.blur();
			  return false;
		  };
		  // Trigerring resize event so map gets updated at start
		  window.dispatchEvent(new Event('resize'));
		  // Sidebar Toggle updates Map size after 500ms
		  $(".sidebar-toggle").on("click tap", function() {
			  console.log("Sidebar tap");
			  setTimeout( function() { map.updateSize();}, 500);
		  });
		  setTimeout(function() {
			  $(".ol-notice").fadeOut()
		  }, 2000);
	}
	/**
	 * get current location (browser) and draw map
	 * default to London, if no coordinates present
	 * author: Laura
	 * */	
	function geoFindMe() {
	  if (!navigator.geolocation){error();}

	  function success(position) {
		var output = [position.coords.longitude, position.coords.latitude]
		drawMap(output);
	  };

	  function error() {
		// London coordinates
		var output = [ -0.076132, 51.508530 ];
		drawMap(output);
	  };

	  navigator.geolocation.getCurrentPosition(success, error);
	}
</script>