<script type="text/javascript">
    var container = document.getElementById('popup');
    var content = $('#popup-content');
    var closer = document.getElementById('popup-closer');
    var hammocks = [];
    var map;
    var vectorSource = new ol.source.Vector();
    var overlay = new ol.Overlay({
        element: container,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });

    /**
     * This is for the Map, a tile Layer is built
     **/
    var tileLayer = new ol.layer.Tile({
        source: new ol.source.OSM({
        }),
    });

    var vectorLayer = new ol.layer.Vector({
        source: vectorSource
    });

    /**
     * The actual Map
     **/
    map = new ol.Map({
        layers: [
            tileLayer,
            vectorLayer,
        ],
        overlays: [overlay],
        target: 'map',
        view: new ol.View({
            center: ol.proj.fromLonLat([13.566360, 52.477995]),
            minZoom: 2,
            zoom:12,
        })
    });

    map.on("moveend", function() {
        mapUpdate();
    });
    map.on("zoomend", function() {
        mapUpdate();
    });

    // Defining the Marker Style...
    var iconStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            anchor: [0.5, 1],
            anchorXUnits: 'fraction',
            anchorYUnits: 'fraction',
            src: "<%= asset_path('hammock.png') %>"
        }))
    });

    var hoverStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            anchor: [0.5, 1],
            anchorXUnits: 'fraction',
            anchorYUnits: 'fraction',
            src: "<%= asset_path('hammock_hover.png') %>"
        }))
    });

    var iconSelectedStyle = new ol.style.Style({

    });

    // Update Map
    function updateMap(hammocks) {
        vectorSource.clear();
        vectorSource.addFeatures(hammocks);
    }

    // Request all hammocks from the Server via Ajax
    function requestHammocksFromServer() {
        $.ajax({
            url: "/api/v1/sites",
        }).done(function(data) {
            hammocks = [];
            // Converting hamocks to a Feature Object
            data.forEach(value => {
                var position = value["position"];
                // Transform from lonlat to Openlayers
                var geometry = new ol.geom.Point([position["lon"], position["lat"]]);
                geometry.transform('EPSG:4326', 'EPSG:900913');
                value["geometry"] = geometry;
                var feature = new ol.Feature(value);
                feature.setStyle(iconStyle);
                hammocks.push(feature);

            });
            updateMap(hammocks);
            updateSidebar(hammocks);
            doQuery();
        });
    }

    function mapUpdate() {
        queryUpdate();
    }

    /**
     *  Helpers for manipulating the DOM
     *
     * */
    // Empty slot, gives a new form
    function emptySlot(position) {
        var form = $("#new_site");
        console.log(form);
        form.on("submit", function(e) {
            e.preventDefault();
            var form = $(this);
            var url = form.attr('action');
            $.ajax({
                url: url,
                method: "POST",
                data: form.serialize(),
            });
        });
        var ret = $("<div></div>");
        ret.append($("<code>" + ol.coordinate.toStringHDMS(position) + "</code>"));
        ret.append(form);
        return ret;
    }

    // Converts the point to html
    function featureToHTML(feature) {
        // Basic form
        var f = $("<div></div>");
        var comment = "Kommentare";
        if(feature.get("review_count") === 1) {
            comment = "Kommentar";
        }
        var isMine = feature.get("belongs_to_user");

        var stars = $("<div><span>Durchschnittsbewertung: </span></div>");
        if(feature.get("meanrating")) {
            var rating = feature.get("meanrating");
            for(var i = 0; i < 5; i++) {
                if (i < rating) {
                    stars.append("<i class='fa fa-star fa-star-positive'>");
                } else {
                    stars.append("<i class='fa fa-star fa-star-negative'>");
                }
            }
        } else {
            stars.append($("<span> keine</span>"));
        }
        f.append($("<h2>" + feature.get("name") + "</h2> "));
        f.append($("<div class='description'>" + feature.get("description") + "</div>"));
        f.append($("<div class='discoverer'>" + feature.get("user").first + " " + feature.get("user").last + "</div>"));
        f.append($("<div class='size'>" + feature.get("sizes") + "</div>"));
        f.append(stars);
        f.append($("<a href='"+ feature.get('comment_url') +"' id='click_on_detail'>" + feature.get("review_count") + " " + comment + "</a>"));
        f.append($("<div id='popup-comments' class='ol-popup-comments'></div>"));
        f.append($("<a href='#' onclick='createCommentForm()'>Kommentar verfassen</a>"));
        f.append($("<form class='comment-container'></form>"));
        if(isMine) {
            f.append($("<a class='btn btn-primary btn-block hammock-btn' href='"+ feature.get("edit") +"'>Bearbeiten</a>"));
            f.append($("<button class='btn btn-danger btn-block' onClick=ajaxDelete('"+ feature.get("delete") +"')>LÃ¶schen</button>"));
        }

        return f;
        /*var size =
        return "<h2>" + feature.get("name") + "</h2> " +
            "<div class='description'>" +
            feature.get("description") + "</div>" + stars.html() + size +
            "<div class='discoverer'>" + feature.get("user").first + " " + feature.get("user").last + "</div>" +
            "<a href='"+ feature.get('comment_url') +"' id='click_on_detail'>" +
            feature.get("review_count") + " " + comment +
            "</a>" + postfix + "<div id='popup-comments' class='ol-popup-comments'></div>" +
            "<a href='#' onclick='createCommentForm()'>Kommentar verfassen</a>" + ;*/
    }


    function onFeatureClick(feature) {
        coordinate = feature.get("geometry").flatCoordinates;
        $(container).addClass("marker");
        content.html(featureToHTML(feature));
        $("#click_on_detail").on("click", function (e) {
            e.preventDefault();
            $.ajax({
                url: this.href,
                method: "GET",
            }).done(function (data) {
                // TODO
                var p = $("#popup-comments");
                p.empty();
                data.forEach(item => {
                    var currentComment = $("<div class='ol-popup-comments-single'></div>");
                    var actualComment = $("<div class='ol-popup-comments-single-comment'></div>");
                    var stars = $("<div class='ol-popup-comments-single-stars'></div>");
                    for (var i = 0; i < 5; i++) {
                        if (i < item["rating"]) {
                            stars.append("<i class='fa fa-star fa-star-positive'>");
                        } else {
                            stars.append("<i class='fa fa-star fa-star-negative'>");
                        }
                    }
                    actualComment.text(item["comment"]);
                    currentComment.append(actualComment);
                    currentComment.append(stars);
                    p.append(currentComment);
                });
                if(p.hasClass("active")) {
                    p.removeClass("active");
                } else {
                    if(data.length > 0) {
                        p.addClass("active");
                    }
                }
            });
        });
        return coordinate;
    }

    function onMapClick(evt) {
        var coordinate = evt.coordinate;
        var feature = map.forEachFeatureAtPixel(evt.pixel,
            function (feature) {
                return feature;
            });
        if (feature) {
            coordinate = onFeatureClick(feature);

        } else {
            $(container).removeClass("marker");
            var lonLat = ol.proj.toLonLat(coordinate);
            content.html(emptySlot(lonLat));
            document.getElementById("site_longitude").value = lonLat[0];
            document.getElementById("site_latitude").value = lonLat[1];
        }
        overlay.setPosition(coordinate);
        $("#popup").hide();
        $("#popup").fadeIn();
    }

    function ajaxDelete(link) {
        $.ajax({
            url: link + ".json",
            method: "DELETE"
        }).done(function() {
            requestHammocksFromServer();
            overlay.setPosition(undefined);
            closer.blur();
        })
    }

    // Request and handle Hammocks
    $(document).ready(function(){
		// geoFindMe();

        $(".filter-fieldset").append(getStarFilter(5));
        $(".filter-fieldset").append(getSizeFilter());
      requestHammocksFromServer();
      // Trigger once to fill sidebar with values

      // Registering Click Handler
      map.on('singleclick', function(evt) {
          onMapClick(evt);
      });

      map.on('pointermove', function(evt){
          vectorSource.getFeatures().forEach(f => {
              f.setStyle(iconStyle);
          });
          var feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
              return feature;
          });
          if(feature) {
              feature.setStyle(hoverStyle);
          }
      });



      // Register Close Button for Notice
      closer.onclick = function() {
          overlay.setPosition(undefined);
          closer.blur();
          return false;
      };
      // Trigerring resize event so map gets updated at start
      window.dispatchEvent(new Event('resize'));
      // Sidebar Toggle updates Map size after 500ms
      $(".sidebar-toggle").on("click tap", function() {
          console.log("Sidebar tap");
          setTimeout( function() { map.updateSize();}, 500);
      });
      setTimeout(function() {
          $(".ol-notice").fadeOut()
      }, 2000);
    });


    /**
     * Search functions and for Live Search
     *
     * */
    $("#search-input").on("input load", function() {
        queryUpdate()
    });

    function queryUpdate() {
        doQuery();
    }

    /***
     * Do the Query and update all (sidebar & map)
     * **/
    function doQuery() {
        // 1: Query the map Position
        erg = mapQuery(hammocks);
        // 2. Do the Search Query
        erg = searchQuery(erg, $("#search-input").val());
        // 3. Do the Stars Query
        erg = starsQuery(erg);
        // 4. Do the Sizes Query
        erg = sizesQuery(erg);
        // Sort!
        var sorted = erg.sort(function(a, b) {
            return distanceToMiddle(a) - distanceToMiddle(b)
        });
        //console.log(sorted);
        updateMap(sorted);
        updateSidebar(sorted);
    }

    function distanceToMiddle(hammock) {
        var center = map.getView().getCenter();
        var lonlat = ol.proj.toLonLat(center);
        var dist = Math.sqrt(Math.pow(hammock.get("position")["lon"] - lonlat[0], 2) + Math.pow(hammock.get("position")["lat"] - lonlat[1], 2));
        return dist;
    }

    function starsQuery(dataset) {
        var starsquery = $("#numstars").val();
        // Data is a String, so convert it to null or undefined
        if(starsquery === "null") {
          starsquery = null;
        } else if(starsquery === "undefined") {
          starsquery = undefined;
        }
        if(starsquery === undefined) {
            return dataset;
        }
        return dataset.filter(hammock => {
            console.log(hammock.get("meanrating"));
            if (starsquery === null) {
                return hammock.get("meanrating") === null;
            } else {
                return hammock.get("meanrating") >= starsquery;
            }
        });
    }

    function sizesQuery(dataset) {
        var sizes = ($("#sizeselector").val());
        var erg = dataset.filter(hammock => {
            return compareArrays(sizes, hammock.get("sizes"));
        });
        return erg;
    }

    function compareArrays(array1, array2) {
        var r = false;
        array1.forEach(a1 => {
            array2.forEach(a2 => {
              if(a1 === a2) {
                  r = true;
              }
            });
        });
        return r;
    }

    /**
     *  Filter for a String in Name or Description
     * */
    function searchQuery(dataset, query) {
        query = query.toLowerCase();
        result = dataset.filter(hammock => hammock.get("name").toLowerCase().includes(query) ||
            hammock.get("description").toLowerCase().includes(query));
        return result;
    }

    function mapQuery(dataset) {
        var result = dataset.filter(hammock =>
            {
                var box = map.getView().calculateExtent();
                var lonlat = ol.proj.transformExtent(box,'EPSG:3857','EPSG:4326');
                var lon = hammock.get("position")["lon"];
                var lat = hammock.get("position")["lat"];
                return lonlat[0] < lon && lon < lonlat[2] && lonlat[1] < lat && lat < lonlat[3];
            });
        return result;
    }

    /**
     * Sidebar
     * */
    function updateSidebar(values) {
        var search_results = $("#search-results");
        search_results.empty();
        values.forEach(value => {
            var object = $("<li class='search-entry' data-id=" + value.get("id") + "></li>");
            var header = $("<h2 class='hammock-header'></h2>");
            var content = $("<div class='description'></div>");
            var author = $("<span></span>");
            var user = value.get("user")["first"] + " "+ value.get("user")["last"]
            content.text("\"" + value.get("description") + "\" " + "(" + user + ")" + " - " + value.get("sizes"));
            header.text(value.get("name"));
            object.append(header);
            if (value.get("meanrating")) {
              var stars = $("<div class='stars'></div>")
              for (i = 0; i < 5; i++) {
                  if (i < value.get("meanrating")) {
                      stars.append("<i class='fa fa-star fa-star-positive'>");
                  } else {
                      stars.append("<i class='fa fa-star fa-star-negative'>");
                  }
              }
              object.append(stars);
            }
            object.append(content);
            //var button = $("<button class='btn btn-primary search-link hammock-btn' type='button'><i class='fa fa-arrow-right'></i></button>");
            object.click(function() {
                navigateTo(value.get("geometry"));
            });
            //object.append(button);
            object.mouseenter(function(eve) {onHoverSearchResult(eve, hoverStyle)});
            object.mouseleave(function(eve) {onHoverSearchResult(eve, iconStyle)});

            search_results.append(object);
        });
    }

    function onHoverSearchResult(eve, hoverStyle) {
        highlightById($(eve.currentTarget).data("id"), hoverStyle);
    }

    function highlightById(id, hoverStyle) {
        hammocks.forEach(hammock => {
            if(hammock.get("id") == id) {
                hammock.setStyle(hoverStyle)
            }
        });
    }

    function createCommentForm() {
        var container = $(".comment-container");
        if(container.hasClass("active")) {
            container.removeClass("active");
        } else {
            container.addClass("active");
        }
        container.empty();
        container.append($("<label for='comment-text'>Text</label>"));
        container.append($("<textarea class='form-control' id='comment-text' style='resize: vertical'>"));
    }

    /**
     * Navigate to Marker in Map
     * */
    function navigateTo(point) {
        map.getView().animate({center: point.flatCoordinates, duration: 500, zoom: 14});
    }

    function getStarFilter(numberstars) {
        var select = $("<select class='form-control' id='numstars'></select>");
        select.append($("<option value=undefined>Alle Anzeigen</option>"));
        select.append($("<option value=null>Nicht bewertet</option>"))
        for(var i = 1; i <= numberstars; i++) {
            var post = "Sterne";
            if(i === 1) {
                post = "Stern";
            }
            select.append($("<option value="+ i + ">Mindestens " + i + " " + post +" </option>"));
        }
        select.on("change", function(e) {
            doQuery();
        });
        return select;
    }

    function getSizeFilter() {
        var select = $("<select class='form-control' id='sizeselector' multiple size=3></select>");
        select.append($('<option value="small" selected>Klein</option>'));
        select.append($('<option value="medium" selected>Mittel</option>'));
        select.append($('<option value="large"" selected>GroÃ</option>'));
        select.on("change", function() {
            doQuery();
        });
        return select;
    }

	/**
	 * get current location (browser) and draw map
	 * default to London, if no coordinates present
	 * author: Laura
	 * */	
	function geoFindMe() {
	  if (!navigator.geolocation){error();}

	  function success(position) {
		var output = [position.coords.longitude, position.coords.latitude]
		//drawMap(output);		// Todo: update Map with center = output
		//navigateTo(point);
	  };

	  function error() {
		// London coordinates
		var output = [ -0.076132, 51.508530 ];
		//drawMap(output);		// Todo: Todo: update Map with center = output -> use navigateTo(point)?
		//navigateTo(point); 
	  };

	  navigator.geolocation.getCurrentPosition(success, error);
	}
</script>